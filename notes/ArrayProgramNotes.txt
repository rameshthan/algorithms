
//Remove Even numbers:
Public int[] removeEven(int[] array){
Int[] oddArray;
Int oddArraySize;
for(int I=0; I< array.length(); I++){
if(array[I] %2 != 0) oddArraySize ++;

}
oddArray = new int[oddArraySize];
Int oddArrIndex = 0;
for(int I=0; I< array.size(); I++{
if(array[I] %2 != 0){
oddArray[oddArrayIndex] = array[I];
oddArrayIndex ++;
}
}
Return oddArray;
}
Complexity: o(n)

//Merge two sorted arrays:

public int[] mergeSortedArray(int[] arr1, int[] arr2){
int a1= arr1.length;
int a2= arr2.length;	
int[] mergedArray = new int[a1+a2];
int i,j,k =0;
while(i < a1 && j < a2){
if(arr1[i] < arr2[j] mergedArray[k++] = arr1[i++];
else mergedArray[k++] = arr2[j++];
}
}
while(i < a1) mergedArray[k++] = arr1[i++];
while(j < a2) mergedArray[k++] = arr2[j++];
} 

public int[] findSum(int[] arr, int n){
	int[] sumArray = new int[2];
	for(int i=0; i< arr.length; i++){
		for(int j=i+1; j< arr.length; j++){
			if( arr[i] + arr[j] == n) {
				sumArray [0] = arr[i];
				sumArray[1] = arr[j];
				break;
		
		}
	}
return sumArray;
}

public int multiplyArray(int[] arr){
	int result=1;
	for(int i=0; i< arr.length; i++){
		result = result * arr[i];	
}
return result;
}

public int[] multipleArrayWithoutIndex(int[] arr){
	int multiple = multiplyArray(arr);
	int arrResult = new int[arr.length];
	for(int i=0; i< arr.length; i++){
	 arrResult[i] = multiple/arr[i];
	}
	return arrResult;
}

public int smallInArray(int[] arr){
	int small = arr[0];
	for (int i=0; i< arr.length; i++){
	if(arr[i] < small) small = arr[i];
	}
	return small;
}

public int firstNonRepetitive(int[] arr){
		for(int i =0; i< arr.length; i++){
		boolean isRepeated =false;
		for(int j=0; j< arr.length; j++){
				if(arr[i] == arr[j] && i !=j) {
					isRepeated = true;
					break;
				}
				
			}
		if(isRepeated == false) {
			return arr[i];
		}
		}
		return -1;
	}


public static int secondMinBF(int[] arr){
		int min = Integer.MAX_VALUE;
		int secondMin = Integer.MAX_VALUE;
		for(int i=0; i< arr.length; i++){
			if(arr[i] < min) min = arr[i];
		}
		for(int j= 0; j< arr.length; j++){
		if(arr[j] > min & arr[j] < secondMin) {
			secondMin = arr[j];
		}
		}
		
		return secondMin;
	}
	
5 3 1 7
	1 
	min =1
	
public static int secondMin(int[] arr){
	int min = Integer.MAX_VALUE;
	int secondMin = Integer.MAX.VALUE;
	for(int i=0; i< arr.lengthl i++){
		if(arr[i] < min) {
			secondMin = min;
			min = arr[i];
		}
		else if(arr[i] < secondMin && arr[i] != min){
		secondMin = arr[i];
		}
		
	}
	return secondMin;
}

